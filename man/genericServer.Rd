% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genericServer.R
\name{genericServer}
\alias{genericServer}
\title{Generic server function that uses the plot_config to handle plotting and UI updates}
\usage{
genericServer(id, moduleType, dataset, filter_input)
}
\arguments{
\item{id}{A string that uniquely identifies the module instance.}

\item{moduleType}{A string specifying the type of module, which corresponds to keys
in the `plot_config` that define how plots and UI elements are handled.}

\item{dataset}{A reactive expression or function that returns the dataset to be used.
This dataset is expected to be processed dynamically based on user input.}

\item{filter_input}{A reactive expression or function that returns user-selected
filters to apply to the dataset.}
}
\value{
A Shiny module server function, which can be use in omopViewer
to add the functionality of specified module types to the shiny
}
\description{
Generic server function that uses the plot_config to handle plotting and UI updates
}
\details{
The `genericServer` function facilitates the creation of modular plot components in
a Shiny application, allowing for scalable and maintainable code. It processes the
data using predefined settings, applies user filters, updates the UI dynamically
based on available data attributes, and manages the rendering of plots and downloading
of plot images.

The function is highly dependent on the `plot_config` configuration list, which must be
predefined and should include details such as the plotting function to use ,
UI elements to dynamically generate, and the specific IDs for updating
UI components (`updatePickerInputIDs`).
}
